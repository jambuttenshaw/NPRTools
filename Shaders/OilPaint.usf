// Adapted from: https://www.shadertoy.com/view/MtKcDG

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(OutViewPort)
SCREEN_PASS_TEXTURE_VIEWPORT(InViewPort)

#define QUALITY_PERCENT 85

/*
BrushDetail = 0.1;
StrokeBend = -1.;
BrushSize = 1.;

PaintSpec = .15;
 */

// Brush strokes parameters
float BrushDetail;
float StrokeBend;
float BrushSize;

// Relief lighting parameters
float PaintSpec;

Texture2D<float4> InColorTexture;
SamplerState sampler0;


float2 getRand2(int idx)
{
	float2 uv = float2(idx % InViewPort_Extent.x, idx / InViewPort_Extent.y) * InViewPort_ExtentInverse;
    float noiseX = (frac(sin(dot(uv, float2(12.9898,78.233) * 2.0)) * 43758.5453));
    float noiseY = sqrt(1 - noiseX * noiseX);
    return float2(noiseX, noiseY);
}

float4 getRand(int idx)
{
	return float4(getRand2(2 * idx), getRand2(2 * idx + 1));
}


float4 getCol(float2 pos)
{
	float2 Res = (float2) (InViewPort_Extent);
	float2 Res0 = (float2) (InViewPort_Extent);

	float lod = 1.;
    // use max(...) for fitting full image or min(...) for fitting only one dir
	float2 uv = (pos - .5 * Res) * min(Res0.y / Res.y, Res0.x / Res.x) / Res0 + .5;
	float4 col = InColorTexture.SampleLevel(sampler0, uv, lod + .7);
	return col;
}

float compsignedmax(float3 c)
{
	float3 s = sign(c);
	float3 a = abs(c);
	if (a.x > a.y && a.x > a.z)
		return c.x;
	if (a.y > a.x && a.y > a.z)
		return c.y;
	return c.z;
}

float2 getGradMax(float2 pos, float eps)
{
	float2 d = float2(eps, 0);
	return float2(
        compsignedmax(getCol(pos + d.xy).xyz - getCol(pos - d.xy).xyz),
        compsignedmax(getCol(pos + d.yx).xyz - getCol(pos - d.yx).xyz)
        ) / eps / 2.;
}


float4 OilPaintStrokesPS(
	float2 InUV : TEXCOORD0
) : SV_Target0
{
	int2 Res = InViewPort_Extent;
	float2 pos = InUV * Res;
    
	float4 fragColor = float4(0, 0, 0, 1);
    
	int pidx0 = 0;
    
	float3 brushPos;
	float layerScaleFact = float(QUALITY_PERCENT) / 100.;
	float ls = layerScaleFact * layerScaleFact;

    //number of grid positions on highest detail level
	int NumGrid = int(float(0x10000 / 2) * min(pow(Res.x / 1920., .5), 1.) * (1. - ls));
	float aspect = Res.x / Res.y;
	int NumX = int(sqrt(float(NumGrid) * aspect) + .5);
	int NumY = int(sqrt(float(NumGrid) / aspect) + .5);
	int pidx2 /*= NumTriangles/2-pidx*/;

    // calc max layer NumY*layerScaleFact^maxLayer==10. - so min-scale layer has at least 10 strokes in y
	int maxLayer = int(log2(10. / float(NumY)) / log2(layerScaleFact));

	for (int layer = min(maxLayer, 11); layer >= 0; layer--) // min(...) at beginning - possible crash cause on some systems?
	{
		int NumX2 = int(float(NumX) * pow(layerScaleFact, float(layer)) + .5);
		int NumY2 = int(float(NumY) * pow(layerScaleFact, float(layer)) + .5);

		// actually -2..2 would be needed, but very slow then...
		//for(int nx=-1;nx<=1;nx++)
		//for(int ny=-1;ny<=1;ny++)
		// replaced the 2 loops above by 1 loop and some modulo magic (possible crash cause on some systems?)
		for (int ni = 0; ni < 9; ni++)
		{
			int nx = ni % 3 - 1;
			int ny = ni / 3 - 1;
			// index centerd in cell
			int n0 = int(dot(floor(float2(pos / Res.xy * float2(NumX2, NumY2))), float2(1, NumX2)));
			pidx2 = n0 + NumX2 * ny + nx;
			int pidx = pidx0 + pidx2;
			brushPos.xy = (float2(pidx2 % NumX2, pidx2 / NumX2) + .5) / float2(NumX2, NumY2) * Res;
			float gridW = Res.x / float(NumX2);
			float gridW0 = Res.x / float(NumX);
			// add some noise to grid pos
			brushPos.xy += gridW * (getRand(pidx).xy - .5);
			// more trigonal grid by displacing every 2nd line
			brushPos.x += gridW * .5 * (float((pidx2 / NumX2) % 2) - .5);
    
			float2 g;
			g = getGradMax(brushPos.xy, gridW * 1.) * .5 + getGradMax(brushPos.xy, gridW * .12) * .5 + .0003 * sin(pos / Res * 20.); // add some gradient to plain areas
			float gl = length(g);
			float2 n = normalize(g);
			float2 t = n.yx * float2(1, -1);
    
			brushPos.z = .5;

			// width and length of brush stroke
			float wh = (gridW - .6 * gridW0) * 1.2;
			float lh = wh;
			float stretch = sqrt(1.5 * pow(3., 1. / float(layer + 1)));
			wh *= BrushSize * (.8 + .4 * getRand(pidx).y) / stretch;
			lh *= BrushSize * (.8 + .4 * getRand(pidx).z) * stretch;
			float wh0 = wh;
    
			wh /= 1. - .25 * abs(StrokeBend);
    
			wh = (gl * BrushDetail < .003 / wh0 && wh0 < Res.x * .02 && layer != maxLayer) ? 0. : wh;
    
			float2 uv = float2(dot(pos - brushPos.xy, n), dot(pos - brushPos.xy, t)) / float2(wh, lh) * .5;
			// bending the brush stroke
			uv.x -= .125 * StrokeBend;
			uv.x += uv.y * uv.y * StrokeBend;
			uv.x /= 1. - .25 * abs(StrokeBend);
			uv += .5;
			//float s=lerp((uv.x-.4)/.6,1.-uv.x,step(.5,uv.x))*5.;
			float s = 1.;
			s *= uv.x * (1. - uv.x) * 6.;
			s *= uv.y * (1. - uv.y) * 6.;
			float s0 = s;
			s = clamp((s - .5) * 2., 0., 1.);
			float2 uv0 = uv;
    
			// brush hair noise
			float pat = length(getRand(pidx + length(uv * 1.5 * sqrt(Res.x / 600.) * float2(.06, .006))));
			float4 rnd = getRand(pidx);
    
			s0 = s;
			s *= .7 * pat;
			uv0.y = 1. - uv0.y;
			float smask = clamp(max(cos(uv0.x * PI * 2. + 1.5 * (rnd.x - .5)), (1.5 * exp(-uv0.y * uv0.y / .15 / .15) + .2) * (1. - uv0.y)) + .1, 0., 1.);
			s += s0 * smask;
			s -= .5 * uv0.y;
    
			float4 dfragColor;
			dfragColor.xyz = getCol(brushPos.xy).xyz * lerp(s * .13 + .87, 1., smask) /**(.975+.025*s)*/;
			s = clamp(s, 0., 1.);
			dfragColor.w = s * step(-0.5, -abs(uv0.x - .5)) * step(-0.5, -abs(uv0.y - .5));
			// do alpha blending
			fragColor = lerp(fragColor, dfragColor, dfragColor.w);
		}
		pidx0 += NumX2 * NumY2;
	}

	return fragColor;
}


float getVal(float2 uv)
{
	return length(InColorTexture.Sample(sampler0, uv).xyz);
}
    
float2 getGrad(float2 uv, float delta)
{
	float2 d = float2(delta, 0);
	return float2(
        getVal(uv + d.xy) - getVal(uv - d.xy),
        getVal(uv + d.yx) - getVal(uv - d.yx)
    ) / delta;
}

float4 OilPaintReliefLightingPS(
	float2 InUV : TEXCOORD0
) : SV_Target0
{
	float3 n = float3(getGrad(InUV, 1.0 / InViewPort_Extent.y), 150.0);
	n = normalize(n);

	float3 light = normalize(float3(-1, 1, 1.4));
	float diff = clamp(dot(n, light), 0., 1.0);
	float spec = clamp(dot(reflect(light, n), float3(0, 0, -1)), 0.0, 1.0);
	spec = pow(spec, 12.0) * PaintSpec;
	float sh = clamp(dot(reflect(light * float3(-1, -1, 1), n), float3(0, 0, -1)), 0.0, 1.0);
	sh = pow(sh, 4.0) * .1;

	float4 outColor = InColorTexture.Sample(sampler0, InUV);
	outColor *= lerp(diff, 1., .9) + spec * float4(.85, 1., 1.15, 1.) + sh * float4(.85, 1., 1.15, 1.);
	outColor.w = 1.;

	return outColor;
}
